name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      can_deploy: ${{ steps.check.outputs.can_deploy }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check deployment permissions
        id: check
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            if [[ "${{ github.actor }}" == "maintainer" || "${{ github.actor }}" == "admin" ]]; then
              echo "can_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "can_deploy=false" >> $GITHUB_OUTPUT
              echo "::error::Only maintainers can deploy to production"
              exit 1
            fi
          else
            echo "can_deploy=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.can_deploy == 'true'
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup deployment
        run: |
          echo "Preparing deployment to ${{ github.event.inputs.environment }}"
          echo "Version: ${{ github.event.inputs.version || 'latest' }}"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy API
        id: deploy
        run: |
          ENV=${{ github.event.inputs.environment }}
          VERSION=${{ github.event.inputs.version || 'latest' }}
          
          echo "Deploying API version $VERSION to $ENV"
          
          # Example deployment commands (adjust based on your infrastructure)
          # aws ecs update-service --cluster codettea-$ENV --service api --force-new-deployment
          # kubectl set image deployment/api api=codettea/api:$VERSION -n $ENV
          
          if [[ "$ENV" == "production" ]]; then
            echo "url=https://api.codettea.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://api-$ENV.codettea.com" >> $GITHUB_OUTPUT
          fi
      
      - name: Run smoke tests
        run: |
          URL=${{ steps.deploy.outputs.url }}
          echo "Running smoke tests against $URL"
          
          # Health check
          curl -f "$URL/health" || exit 1
          
          # API availability check
          curl -f "$URL/api/features" -H "X-API-Key: ${{ secrets.API_KEY }}" || exit 1
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment }}: ${{ job.status }}
            Version: ${{ github.event.inputs.version || 'latest' }}
            URL: ${{ steps.deploy.outputs.url }}
            Deployed by: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment in ${{ github.event.inputs.environment }}"
          # Add rollback commands here
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: |
            ⚠️ Rollback initiated for ${{ github.event.inputs.environment }}
            Reason: Deployment failed
            Initiated by: System
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}