name: Multi-Agent System Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type checking
      run: npm run type-check
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run template validation
      run: npm run test-templates
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run unit tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[test-integration]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Git for testing
      run: |
        git config --global user.name "Test User"
        git config --global user.email "test@example.com"
        
    - name: Create test directories
      run: |
        mkdir -p /tmp/test-repo
        mkdir -p /tmp/test-worktrees
        
    - name: Run integration tests
      run: TEST_INTEGRATION=true npm run test:integration
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive test suite
      run: npm run validate
      
    - name: Check coverage thresholds
      run: |
        npm run test:coverage
        if [ -f coverage/lcov.info ]; then
          echo "‚úÖ Coverage report generated"
          lines=$(grep -o 'LF:[0-9]*' coverage/lcov.info | cut -d: -f2 | awk '{s+=$1} END {print s}')
          found=$(grep -o 'LH:[0-9]*' coverage/lcov.info | cut -d: -f2 | awk '{s+=$1} END {print s}')
          if [ -n "$lines" ] && [ -n "$found" ]; then
            coverage=$(echo "scale=2; $found * 100 / $lines" | bc)
            echo "üìä Line Coverage: $coverage%"
            if [ $(echo "$coverage >= 80" | bc) -eq 1 ]; then
              echo "‚úÖ Coverage threshold met"
            else
              echo "‚ùå Coverage below 80% threshold"
              exit 1
            fi
          fi
        else
          echo "‚ö†Ô∏è No coverage report found"
        fi

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for vulnerabilities
      run: |
        if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0'; then
          echo "‚ùå High severity vulnerabilities found"
          npm audit --audit-level=high
          exit 1
        else
          echo "‚úÖ No high severity vulnerabilities found"
        fi

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: |
        echo "üèÉ Running performance tests..."
        start_time=$(date +%s%3N)
        npm run test-templates
        end_time=$(date +%s%3N)
        duration=$((end_time - start_time))
        echo "üìä Template processing took ${duration}ms"
        
        if [ $duration -gt 10000 ]; then
          echo "‚ö†Ô∏è Template processing slower than expected (>10s)"
        else
          echo "‚úÖ Template processing performance good"
        fi
        
    - name: Memory usage test
      run: |
        echo "üíæ Checking memory usage..."
        node -e "
          const start = process.memoryUsage();
          require('./test-templates.ts');
          const end = process.memoryUsage();
          const used = end.heapUsed - start.heapUsed;
          console.log('üìä Memory used:', Math.round(used / 1024 / 1024), 'MB');
          if (used > 100 * 1024 * 1024) {
            console.log('‚ö†Ô∏è High memory usage detected');
            process.exit(1);
          }
        "

  docs-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate README files
      run: |
        echo "üìö Validating documentation..."
        
        # Check main README exists and has required sections
        if [ ! -f README.md ]; then
          echo "‚ùå Main README.md missing"
          exit 1
        fi
        
        required_sections=("Quick Start" "Interactive CLI" "Configuration" "Troubleshooting")
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" README.md; then
            echo "‚ùå README missing section: $section"
            exit 1
          fi
        done
        
        echo "‚úÖ Documentation validation passed"
        
    - name: Check for broken links
      run: |
        echo "üîó Checking for broken internal links..."
        
        # Simple check for internal file references
        broken_links=0
        for file in *.md **/*.md; do
          if [ -f "$file" ]; then
            # Check for references to missing files
            while IFS= read -r line; do
              if [[ $line =~ \[.*\]\(([^)]+)\) ]]; then
                link="${BASH_REMATCH[1]}"
                if [[ $link =~ ^[^http] ]] && [ ! -f "$link" ]; then
                  echo "‚ùå Broken link in $file: $link"
                  broken_links=$((broken_links + 1))
                fi
              fi
            done < "$file"
          fi
        done
        
        if [ $broken_links -gt 0 ]; then
          echo "‚ùå Found $broken_links broken links"
          exit 1
        else
          echo "‚úÖ No broken links found"
        fi